************** MODERN JAVASCRIPT ********************
NODE.js and NPM are 3rd party packages where you can find libraries/frameworks and Development tools

NPM - Node package manager, command line interface, and write scripts to automatically set up packages

Babel - converts ES6/ESNext to ES5
converting is done so that javascript works in all browsers

webpack - module bundler, used to be able to use modules it will bundle modules together into a single file so that modules from ES6 work in all browsers


**************** COMMAND LINE **********************
- Main concept of the command line is that you're always in a folder
- check contents of folder
    - windows: dir
    - mac: ls
- change directory
    - cd folderName (hitting tab after you type first letter will autofill a folder)
- moving up a folder 
    - cd ..
- clearing command prompt 
    - windows: cls
    - mac: clear
- create a folder 
    - mkdir folderName
- create new file 
    - windows: copy NUL fileName
    - mac: touch nameFile
- copy file 
    - windows: copy fileNameToCopy folderNameToCopyTo
    - mac: cp fileNameToCopy folderNameToCopyTo
- move file
    - windows: move fileToMove folderToMoveTo
    - mac: mv fileNameToCopy folderNameToCopyTo
- delete a file (REMOVES FROM HARDRIVE)
    - windows: del nameOfFile
    - mac: rm nameOfFile
- delete folder and everything in it
    - windows: rmdir /S folderName
    - mac: rm -r folderName
- open files
    - windows: start fileName
    - mac: open fileName


    ***********MODEL-VIEW-CONTROLLER ARCHITECTURE (MVC)****************
    Advantage
    - it decouples the presentation logic with the application logic with a controller in between them which controlls the entire app

    Implementing MVC for forkify
    - Controller 
        > index.js
        > recipe.js
        > List.js
        > likes.js
        - connects Model and View
    - Model > Search.js 
        - ajax calls for search queries
        - data and app logic
    - View 
        > searchView.js
        > recipeView.js
        > listView.js
        > likesView.js
        - get the user input and print the results of search
        - gets and displays data from and to the UI

************* FIRST LECTURE **********************
* HOW TO USE ES6 MODULES
* DEFAULT AND NAMED EXPORTS AND IMPORTS

When creating module files or modules, convention dictates that name should begin with capital letter. 

The index.js will act as the controller that will connect view and models modules.

Importing and exporting from Modules:

DEFAULT: is an keyword for exporting ONE thing from a module;
- code example: export default 'string' or num or anything; 

IMPORTS: is a keyword for importing something from another module;
- code exmaple: import varName from './folder/filename'; 
    - in the above example the . means current directory after that just pass in the path to the file. When importing there is no need to specify that the file is .js

Exporting many things uses variable names:
- code examples: 
    -export const varName (param) => functionCode;
    -export const varName2 = number;

Importing many things; use the exact same name given in the exporting file:
- import {varName, varName2} from './folder/filename';
    - the name of the imported variables can be changed;
        - import {varName as newName, varName2 as newName2} from './folder/filename';

Importing everything from a module
- code example: import * as varModuleName from './folder/filename';
    - this means that when using the variables they will have to be prepended by the name of the variable name.
        - varModuleName.varName would allow you to use this.



************** API CALLS *************************

API key: is like a password that is unique for everyone. This is used to make requests and the key can be used to track how many requests someone makes per day.

REMEMBER fetch() Does not work in all browsers yet! Instead use Axios a library that works in all browsers and automatically returns json! Can be installed with npm.
- This library needs to be imported to the js file you'll be using it similar to modules.
    - code example: import pacakgeVarName from 'packageNameNoPathNeeded';

Once axios is installed use it the same way you would fetch: axios()

Example code for api call:

import axios form 'axios';

async function getResults(query){
    const key = 'getKeyForAPI';
    //wrap it in try catch for error handling
    try{
        //using template literal below; look at api documentation for how to use the url, key and other keywords
        const result = await axios(`http://apiurl.com/api/search?key=${key}&q=${query}`);
        console.log(result)
    } catch (error){
        alert(error)
    }
}

getResults('pizza');


***  APPLICATION STATE & IMPLEMENTING STATE ***

Simple way of keeping track of the state of the app to correctly render UI; in this case we used a constant object named state


**** BUILDING THE SEARCH VIEW MODULE PART 1 *****

-To keep thing neatly bundled we create a file for the DOM elements named base.js
    - we export this module and import it anywhere we need access to the DOM elements.
    - exporting of the elemtns is done with an object to keep them all in a neatly packaged object


 **** IMPLEMENTING SEARCH RESULTS PAGINATION *****
 -.closest() method for easier event handling
 - How and why to use data-* attributes in html5

 closest() method recieved a string param i.e class/id of an element and it will traverse up the DOM tree to find the first element containing that string. this is useful when trying to traverse select a parent element; see @closest in index.js

 data- attributes can have any name example data-nameHere and set it equal to any string value (string can be parsed to int); this info can then be used with element.dataset.nameOfDataHere to move through pages for example see @data in index.js

**** IMPLEMENTING RECIPE MODEL ****
- for this exercise we create a config.js folder to keep the key and proxy variables. NOTE: IN A REAL APP THIS SHOULD NEVER BE THE CASE. THESE SHOULD BE PRIVATE AND NEVER STORED ON THE CLIENTSIDE!!

- Ideally Calls to keys should be done on own server and set up own api to the server where you do the calls using the key.

*** BUILDING THE RECIPE CONTROLLER ***
- How to read data fromr the page URL;
- How to responsod to the hashchange event;
- how to add the same event listener to multiple events;

HASHCHANGE 
- an event for when the URL changes after the pound symbol #. 
    - for example www.someurl.com/#hash1 changes to www.someurl.com/#hash2
- the event is added to the window object

The hash can be retrieved from window.location.hash; window.location is the entire url

- load event fires when the page is loaded; happens on the window object;


MULTIPLE EVENTS TO SAME EVENTLISTENER
- adding multiple events to for the same function can be done with a forEach loop if the events are in an array

example 
replace:
window.addEventListener('hashchange',controlRecipe);
window.addEventListener('load', controlRecipe);

with:
['hashchange', 'load'].forEach(event => window.addEventListener(event, controlRecipe));